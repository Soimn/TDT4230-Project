#version 450 core

struct Triangle_Data
{
	vec4 alpha;
	vec4 beta;
	vec4 gamma;
};

struct Triangle_Material_Data
{
	vec4 n0n2x;
	vec4 n1n2y;
	vec4 n2zmat;
};

struct Bounding_Sphere
{
	vec4 pr;
};

struct Light
{
  vec4 p0nx;
  vec4 p1ny;
  vec4 p2nz;
  vec4 areaidmat;
};

#define MaterialKind_Diffuse    0
#define MaterialKind_Reflective 1
#define MaterialKind_Refractive 2
#define MaterialKind_Light      3

struct Material
{
	vec4 color;
	uint kind;
};

layout(local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
layout(rgba32f, binding = 0) restrict writeonly uniform image2D backbuffer;
layout(rgba32f, binding = 1) restrict uniform image2D accumulated_frames_buffer;
layout(std140, binding = 2) restrict readonly buffer triangle_data { Triangle_Data tri_data[]; };
layout(std140, binding = 3) restrict readonly buffer triangle_mat_data { Triangle_Material_Data tri_mat_data[]; };
layout(std140, binding = 4) restrict readonly buffer bounding_sphere_data { Bounding_Sphere bounding_spheres[]; };

layout(std140, binding = 6) restrict readonly buffer material_data { Material materials[]; };
layout(std140, binding = 7) restrict readonly buffer light_data { Light lights[]; };

layout(location = 0) uniform uint frame_index;
layout(location = 1) uniform float fov;
layout(location = 2) uniform vec2 backbuffer_dim;

#define PI32  3.1415926535
#define TAU32 6.2831853071
#define PI32_ON_2 1.5707963267

#define AIR_IOR 1.000293

struct pcg32_state
{
	uint state;
	uint increment;
};

void pcg32_seed(inout pcg32_state pcg_state, uint seed, uint increment);
uint pcg32_next(inout pcg32_state pcg_state);

pcg32_state pcg_state;

float
Random01()
{
	return pcg32_next(pcg_state) * 2.3283064365386962890625e-10;
}

// NOTE: pdf = 1/4pi
vec3
RandomDir()
{
	float x_1 = Random01();
	float x_2 = Random01();

	float phi = TAU32*x_1;
	//float theta = PI32*x_2;
	//float theta = acos(1 - 2*x_2); // NOTE: inverse transform sampling: https://corysimon.github.io/articles/uniformdistn-on-sphere/
	// NOTE: Changed to eq 6-8 from: https://mathworld.wolfram.com/SpherePointPicking.html
	float u = x_2*2 - 1;
	float eta = sqrt(1 - u*u);
	return vec3(cos(phi)*eta, sin(phi)*eta, u);
}

// NOTE: pdf = 1/2pi
vec3
RandomDirInHemi(vec3 plane_normal)
{
	vec3 dir = RandomDir();
	return (dot(dir, plane_normal) < 0 ? -dir : dir);
}

// NOTE: pdf = cos theta_i / pi
vec3
CosineWeightedRandomDirInHemi(vec3 plane_normal)
{
  return normalize(plane_normal + RandomDir());
}

struct Hit_Data
{
	int id;
	int material_id;
	vec3 point;
	vec3 normal;
};

Hit_Data
CastRay(vec3 origin, vec3 ray, bool invert_faces)
{
	Hit_Data result;
	result.id        = -1;
  vec3 closest_tuv = vec3(1e9, 0, 0);

	for (int i = 0; i < bounding_spheres.length(); ++i)
	{
		vec4 pr = bounding_spheres[i].pr;
		vec3 p  = pr.xyz;
		float r = pr.w;

		vec3 op = p - origin;
		float b = dot(op, ray);

		float discriminant = b*b - dot(op, op) + r*r;
		if (discriminant < 0) continue;

		vec3 p0 = tri_data[i].alpha.xyz;
		vec3 p1 = tri_data[i].beta.xyz;
		vec3 p2 = vec3(tri_data[i].alpha.w, tri_data[i].beta.w, tri_data[i].gamma.x);

    // Derived from math presented in the paper "Fast, Minimum Storage Ray/Triangle Intersection" by MÃ¶ller and Trumbore.
    // https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf
    vec3 D       = ray;
    vec3 T       = origin - p0;
    vec3 E_1     = p1 - p0;
    vec3 E_2     = p2 - p0;
    vec3 E_1xE_2 = cross(E_1, E_2);
    vec3 DxT     = cross(D, T);

    float denominator = dot(D, -E_1xE_2);

    vec3 tuv = vec3(dot(T, E_1xE_2), dot(-E_2, DxT), dot(E_1, DxT)) / denominator;

    bool hit_plane = (invert_faces ? denominator < 0 : denominator > 0);
    if ((tuv.x > 0 && tuv.x < closest_tuv.x) && hit_plane && tuv.y >= 0 && tuv.z >= 0 && tuv.y + tuv.z <= 1)
    {
			result.id   = i;
			closest_tuv = tuv;
    }
	}

	if (result.id != -1)
	{
		int i = result.id;

		vec3 n0 = tri_mat_data[i].n0n2x.xyz;
		vec3 n1 = tri_mat_data[i].n1n2y.xyz;
		vec3 n2 = vec3(tri_mat_data[i].n0n2x.w, tri_mat_data[i].n1n2y.w, tri_mat_data[i].n2zmat.x);

		float lambda_1 = closest_tuv.y;
		float lambda_2 = closest_tuv.z;
		float lambda_3 = 1 - lambda_1 - lambda_2;

		result.point       = origin + closest_tuv.x*ray;
		result.normal      = lambda_3*n0 + lambda_1*n1 + lambda_2*n2;
		result.material_id = int(tri_mat_data[i].n2zmat.y);

		if (invert_faces) result.normal = -result.normal;
	}

	return result;
}

bool
CastShadowRay(vec3 origin, vec3 ray, int light_id)
{
  return (CastRay(origin, ray, false).id == light_id);
}

void
main()
{
	uint invocation_index = gl_GlobalInvocationID.y*gl_NumWorkGroups.x*gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
	uint seed = (invocation_index + frame_index*187272781)*178525871;
	pcg32_seed(pcg_state, seed, invocation_index);

	float near_plane = backbuffer_dim.x/(2*tan(fov/2));

	vec3 ray = vec3(backbuffer_dim.x/2 - gl_GlobalInvocationID.x, -backbuffer_dim.y/2 + gl_GlobalInvocationID.y, near_plane);
	ray += vec3(-Random01(), Random01(), 0);
	ray = normalize(ray);

  vec3 origin          = vec3(0);
  vec3 color           = vec3(0);
  vec3 multiplier      = vec3(1);
  bool is_reflected    = false;
  bool is_transmitted  = false;
  bool has_transmitted = false;
  for (uint bounce_index = 0; bounce_index < 10; ++bounce_index)
  {
    Hit_Data hit_data = CastRay(origin, ray, is_transmitted);
    if (hit_data.id != -1)
    {
      vec3 new_origin = hit_data.point + hit_data.normal*0.001;

      Material material = materials[hit_data.material_id];

      if (material.kind == MaterialKind_Light)
      {
        //if (bounce_index == 0 || is_reflected || has_transmitted) color += multiplier*material.color.xyz*material.color.w;
        color += multiplier*material.color.xyz*material.color.w;
        break;
      }
      else if (material.kind == MaterialKind_Diffuse)
      {
        vec3 new_ray = CosineWeightedRandomDirInHemi(hit_data.normal);

        /*Light light = lights[clamp(int(Random01()*lights.length()), 0, lights.length()-1)];

        float light_r1 = sqrt(Random01());
        float light_r2 = Random01();

        // NOTE: from section 4.2 of https://www.cs.princeton.edu/~funk/tog02.pdf
        vec3 light_p = (1 - light_r1)*light.p0nx.xyz + (light_r1*(1-light_r2))*light.p1ny.xyz + (light_r1*light_r2)*light.p2nz.xyz;

        vec3 to_light   = light_p - hit_data.point;
        vec3 to_light_n = normalize(to_light);

        if (CastShadowRay(new_origin, to_light_n, int(light.areaidmat.y)))
        {
          Material light_material = materials[int(light.areaidmat.z)];

          vec3 light_normal    = vec3(light.p0nx.w, light.p1ny.w, light.p2nz.w);
          float light_area     = light.areaidmat.x;
          vec3 light_intensity = light_material.color.xyz*light_material.color.w;

          float res_pdf = (light_area*dot(-to_light_n, light_normal))/dot(to_light, to_light);

          color += multiplier*material.color.xyz*(1/PI32)*light_intensity*dot(to_light_n, hit_data.normal)*res_pdf;
        }*/

        multiplier *= material.color.xyz;

        is_reflected    = false;
        is_transmitted  = false;
        has_transmitted = false;

        origin = new_origin;
        ray    = new_ray;
      }
      else if (material.kind == MaterialKind_Reflective)
      {
        vec3 new_ray = reflect(ray, hit_data.normal);

        is_reflected    = true;
        is_transmitted  = false;
        has_transmitted = false;

        origin = new_origin;
        ray    = new_ray;
      }
      else if (material.kind == MaterialKind_Refractive)
      {
        float ior = material.color.w;

        // NOTE: https://en.wikipedia.org/wiki/Schlick%27s_approximation
        //       https://blog.demofox.org/2017/01/09/raytracing-reflection-refraction-fresnel-total-internal-reflection-and-beers-law/
        //       https://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf

        float n1 = AIR_IOR;
        float n2 = ior;
        if (is_transmitted)
        {
          n1 = ior;
          n2 = AIR_IOR;
        }

        float n              = n1/n2;
        float cos_theta_i    = dot(-ray, hit_data.normal);
        float sin_sq_theta_t = n*n*(1 - cos_theta_i*cos_theta_i);
        float cos_theta_t    = sqrt(1 - sin_sq_theta_t);

        float r = 1;
        if (sin_sq_theta_t <= 1)
        {
          float r_s = (n1*cos_theta_i - n2*cos_theta_t)/(n1*cos_theta_i + n2*cos_theta_t);
          float r_p = (n2*cos_theta_i - n1*cos_theta_t)/(n2*cos_theta_i + n1*cos_theta_t);

          r = (r_s*r_s + r_p*r_p)/2;
        }

        vec3 new_ray;
        if (Random01() <= r)
        {
          new_ray = reflect(ray, hit_data.normal);

          is_reflected    = true;
          is_transmitted  = false;
          has_transmitted = false;
        }
        else
        {
          new_ray = refract(ray, hit_data.normal, n1/n2);

          is_reflected    = false;
          is_transmitted  = !is_transmitted;
          has_transmitted = !is_transmitted;

          multiplier *= material.color.xyz;
        }

        origin = new_origin;
        ray    = new_ray;
      }
    }
  }

	vec4 accumulated_value = imageLoad(accumulated_frames_buffer, ivec2(gl_GlobalInvocationID.xy));
	accumulated_value.xyz += color;
	imageStore(accumulated_frames_buffer, ivec2(gl_GlobalInvocationID.xy), accumulated_value);
	imageStore(backbuffer, ivec2(gl_GlobalInvocationID.xy), vec4(accumulated_value.xyz/(frame_index+1), 1));
}
