#version 450 core

layout(local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

struct Triangle_Data
{
	vec4 p0_p2x;
	vec4 p1_p2y;
	vec4 p2z;
};

struct Triangle_Material_Data
{
	vec4 n0_n2x;
	vec4 n1_n2y;
	vec4 n2z_mat;
};

struct Bounding_Sphere
{
	vec4 p_r;
};

struct Light
{
  vec4 p0_nx;
  vec4 p1_ny;
  vec4 p2_nz;
  vec4 area_id_mat;
};

#define MaterialKind_Diffuse    0
#define MaterialKind_Reflective 1
#define MaterialKind_Refractive 2
#define MaterialKind_Light      3

struct Material
{
	vec4 color;
	uint kind;
};

layout(rgba32f, binding = 0) restrict writeonly uniform image2D backbuffer;
layout(rgba32f, binding = 1) restrict uniform image2D accumulated_frames_buffer;
layout(std140,  binding = 2) restrict readonly buffer triangle_data        { Triangle_Data tri_data[];              };
layout(std140,  binding = 3) restrict readonly buffer triangle_mat_data    { Triangle_Material_Data tri_mat_data[]; };
layout(std140,  binding = 4) restrict readonly buffer bounding_sphere_data { Bounding_Sphere bounding_spheres[];    };
layout(std140,  binding = 5) restrict readonly buffer material_data        { Material materials[];                  };
layout(std140,  binding = 6) restrict readonly buffer light_data           { Light lights[];                        };

layout(location = 0) uniform uint frame_index;
layout(location = 1) uniform vec2 backbuffer_dim;
layout(location = 2) uniform uint number_of_bounces;
layout(location = 3) uniform bool enable_dispersion;
layout(location = 4) uniform bool enable_bidirectional_tracing;

#define PI32  3.1415926535
#define TAU32 6.2831853071
#define PI32_ON_2 1.5707963267

#define AIR_IOR 1.000293

struct pcg32_state
{
	uint state;
	uint increment;
};

void pcg32_seed(inout pcg32_state pcg_state, uint seed, uint increment);
uint pcg32_next(inout pcg32_state pcg_state);

pcg32_state pcg_state;

float
Random01()
{
	return pcg32_next(pcg_state) * 2.3283064365386962890625e-10;
}

// NOTE: pdf = 1/4pi
vec3
RandomDir()
{
	float x_1 = Random01();
	float x_2 = Random01();

	float phi = TAU32*x_1;
	//float theta = PI32*x_2;
	//float theta = acos(1 - 2*x_2); // NOTE: inverse transform sampling: https://corysimon.github.io/articles/uniformdistn-on-sphere/
	// NOTE: Changed to eq 6-8 from: https://mathworld.wolfram.com/SpherePointPicking.html
	float u = x_2*2 - 1;
	float eta = sqrt(1 - u*u);
	return vec3(cos(phi)*eta, sin(phi)*eta, u);
}

// NOTE: pdf = 1/2pi
vec3
RandomDirInHemi(vec3 plane_normal)
{
	vec3 dir = RandomDir();
	return (dot(dir, plane_normal) < 0 ? -dir : dir);
}

// NOTE: pdf = cos theta_i / pi
vec3
CosineWeightedRandomDirInHemi(vec3 plane_normal)
{
	vec3 w;
	{ // NOTE: cosine-weighted hemisphere sampling from: https://alexanderameye.github.io/notes/sampling-the-hemisphere/
		float e0 = Random01();
		float e1 = Random01();

		//float theta = acos(sqrt(e0));
		float cos_theta = sqrt(e0);
		float sin_theta = sqrt(1 - cos_theta*cos_theta);
		float phi   = TAU32*e1;

		w = vec3(cos(phi)*sin_theta, sin(phi)*sin_theta, cos_theta);
	}

	vec3 n = plane_normal.yzx; // NOTE: rotate to move singularity below the object
	vec3 b1;
	vec3 b2;
	vec3 v;
	{ // NOTE: orthonormal basis from one vector https://backend.orbit.dtu.dk/ws/portalfiles/portal/126824972/onb_frisvad_jgt2012_v2.pdf
		if (n.z < -0.99999)
		{
			b1 = vec3(0, -1, 0);
			b2 = vec3(-1, 0, 0);
		}
		else
		{
			float a = 1/(1 + n.z);
			float b = -n.x*n.y*a;
			b1 = vec3(1 - n.x*n.x*a, b, -n.x);
			b2 = vec3(b, 1 - n.y*n.y*a, -n.y);
		}

		v = w.x*b1 + w.y*b2 + w.z*n;
	}

	return v.zxy; // NOTE: rotate back
}

struct Hit_Data
{
	int id;
	int material_id;
	vec3 point;
	vec3 normal;
};

Hit_Data
CastRay(vec3 origin, vec3 ray, bool invert_faces)
{
	Hit_Data result;
	result.id        = -1;
  vec3 closest_tuv = vec3(1e9, 0, 0);

	for (int i = 0; i < bounding_spheres.length(); ++i)
	{
		// NOTE: First test against bounding sphere, this is a perf loss for scenes with a low triangle count, but a win for scenes with
		//       higher counts. Ideally this would be a kd-tree (or some other space partition or bvh) traversal instead, but I didn't
		//       find a good way of doing stackless traversal that used a low amount of memory (touching memory seems to be more expensive
		//       on the gpu than cpu from the tests I have run, which is why I cram everything into vectors).
		if (!invert_faces)
		{
			vec4 pr = bounding_spheres[i].p_r;
			vec3 p  = pr.xyz;
			float r = pr.w;

			vec3 op = p - origin;
			float b = dot(op, ray);

			float discriminant = b*b - dot(op, op) + r*r;
			if (discriminant < 0) continue;
		}

		vec3 p0 = tri_data[i].p0_p2x.xyz;
		vec3 p1 = tri_data[i].p1_p2y.xyz;
		vec3 p2 = vec3(tri_data[i].p0_p2x.w, tri_data[i].p1_p2y.w, tri_data[i].p2z.x);

    // NOTE: Derived from math presented in the paper "Fast, Minimum Storage Ray/Triangle Intersection" by MÃ¶ller and Trumbore.
    //       https://cadxfem.org/inf/Fast%20MinimumStorage%20RayTriangle%20Intersection.pdf
    vec3 D       = ray;
    vec3 T       = origin - p0;
    vec3 E_1     = p1 - p0;
    vec3 E_2     = p2 - p0;
    vec3 E_1xE_2 = cross(E_1, E_2);
    vec3 DxT     = cross(D, T);

    float denominator = dot(D, -E_1xE_2);

    vec3 tuv = vec3(dot(T, E_1xE_2), dot(-E_2, DxT), dot(E_1, DxT)) / denominator;

    bool hit_plane       = (invert_faces ? denominator < 0 : denominator > 0);
		bool inside_triangle = (tuv.y >= 0 && tuv.z >= 0 && tuv.y + tuv.z <= 1);
    if ((tuv.x > 0 && tuv.x < closest_tuv.x) && hit_plane && inside_triangle)
    {
			result.id   = i;
			closest_tuv = tuv;
    }
	}

	if (result.id != -1)
	{
		int i = result.id;

		vec3 n0 = tri_mat_data[i].n0_n2x.xyz;
		vec3 n1 = tri_mat_data[i].n1_n2y.xyz;
		vec3 n2 = vec3(tri_mat_data[i].n0_n2x.w, tri_mat_data[i].n1_n2y.w, tri_mat_data[i].n2z_mat.x);

		float lambda_1 = closest_tuv.y;
		float lambda_2 = closest_tuv.z;
		float lambda_3 = 1 - lambda_1 - lambda_2;

		result.point       = origin + closest_tuv.x*ray;
		result.normal      = lambda_3*n0 + lambda_1*n1 + lambda_2*n2;
		result.material_id = int(tri_mat_data[i].n2z_mat.y);

		if (invert_faces) result.normal = -result.normal;
	}

	return result;
}

void
PathTracing()
{
	uint adjusted_frame_index = (enable_dispersion ? frame_index/3 : frame_index);
	uint dispersion_index     = (enable_dispersion ? frame_index%3 : 0);

	uint invocation_index = gl_GlobalInvocationID.y*gl_NumWorkGroups.x*gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
	uint seed = (invocation_index + adjusted_frame_index*187272781)*178525871;
	pcg32_seed(pcg_state, seed, invocation_index);

	vec3 origin           = vec3(0);
	float near_plane      = backbuffer_dim.x/2;
	float gaussian_radius = 2;
	vec3 ray = vec3(backbuffer_dim.x/2 - gl_GlobalInvocationID.x, -backbuffer_dim.y/2 + gl_GlobalInvocationID.y, near_plane);
	ray += gaussian_radius*(2*vec3(Random01() + Random01() + Random01(), Random01() + Random01() + Random01(), 0)/3 - vec3(1));
	ray = normalize(ray);

  vec3 color      = vec3(0);
  vec3 multiplier = vec3(1);

	bool is_transmitted = false;
	bool is_diffuse     = false;
	for (uint bounce = 0; bounce < number_of_bounces; ++bounce)
	{
		Hit_Data hit = CastRay(origin, ray, is_transmitted);
		if (hit.id == -1)
		{
			color = vec3(1, 0, 1);
			break;
		}
		else
		{
			vec3 new_origin = hit.point + hit.normal*0.001;

			Material hit_material = materials[hit.material_id];

			if (hit_material.kind == MaterialKind_Light)
			{
				if (bounce == 0 || enable_dispersion || !is_diffuse) color += multiplier*hit_material.color.xyz*hit_material.color.w;
				break;
			}
			else if (hit_material.kind == MaterialKind_Reflective)
			{
				is_transmitted = false;
				is_diffuse     = false;

				origin = new_origin;
				ray    = reflect(ray, hit.normal);
			}
			else if (hit_material.kind == MaterialKind_Refractive)
			{
				float ior = hit_material.color.xyz[dispersion_index];

        // NOTE: https://en.wikipedia.org/wiki/Schlick%27s_approximation
        //       https://blog.demofox.org/2017/01/09/raytracing-reflection-refraction-fresnel-total-internal-reflection-and-beers-law/
        //       https://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf

        float n1 = AIR_IOR;
        float n2 = ior;
        if (is_transmitted)
        {
          n1 = ior;
          n2 = AIR_IOR;
        }

        float n              = n1/n2;
        float cos_theta_i    = dot(-ray, hit.normal);
        float sin_sq_theta_t = n*n*(1 - cos_theta_i*cos_theta_i);
        float cos_theta_t    = sqrt(1 - sin_sq_theta_t);

        float r = 1;
        if (sin_sq_theta_t <= 1)
        {
          float r_s = (n1*cos_theta_i - n2*cos_theta_t)/(n1*cos_theta_i + n2*cos_theta_t);
          float r_p = (n2*cos_theta_i - n1*cos_theta_t)/(n2*cos_theta_i + n1*cos_theta_t);

          r = (r_s*r_s + r_p*r_p)/2;
        }

        vec3 new_ray;
        if (Random01() <= r)
        {
          new_ray = reflect(ray, hit.normal);
          is_transmitted = is_transmitted;
					is_diffuse     = false;
        }
        else
        {
          new_ray = refract(ray, hit.normal, n1/n2);

          is_transmitted = !is_transmitted;
					is_diffuse     = false;
        }

        origin = new_origin;
        ray    = new_ray;
			}
			else
			{
				if (!enable_dispersion) // NOTE: next event estimation causes flashing colors when used with dispersion
				{
					Light light = lights[clamp(int(Random01()*lights.length()), 0, lights.length()-1)];

					float light_r1 = sqrt(Random01());
					float light_r2 = Random01();

					// NOTE: from section 4.2 of https://www.cs.princeton.edu/~funk/tog02.pdf
					vec3 light_p = (1 - light_r1)*light.p0_nx.xyz + (light_r1*(1-light_r2))*light.p1_ny.xyz + (light_r1*light_r2)*light.p2_nz.xyz;

					vec3 to_light   = light_p - hit.point;
					vec3 to_light_n = normalize(to_light);

					if (CastRay(new_origin, to_light_n, false).id == int(light.area_id_mat.y))
					{
						Material light_material = materials[int(light.area_id_mat.z)];

						vec3 light_normal    = vec3(light.p0_nx.w, light.p1_ny.w, light.p2_nz.w);
						float light_area     = light.area_id_mat.x;
						vec3 light_intensity = light_material.color.xyz*light_material.color.w;

						float res_pdf = (light_area*dot(-to_light_n, light_normal))/dot(to_light, to_light);

						color += multiplier*(hit_material.color.xyz/PI32)*light_intensity*dot(to_light_n, hit.normal)*res_pdf;
					}
				}

				multiplier *= hit_material.color.xyz;

				is_transmitted = false;
				is_diffuse     = true;

				origin = new_origin;
				ray    = CosineWeightedRandomDirInHemi(hit.normal);
			}
		}
	}

	if (enable_dispersion)
	{
		vec3 color_mask = vec3(0);
		color_mask[dispersion_index] = 1;
		color *= color_mask;
	}

	vec4 accumulated_value = imageLoad(accumulated_frames_buffer, ivec2(gl_GlobalInvocationID.xy));
	accumulated_value.xyz += color;
	imageStore(accumulated_frames_buffer, ivec2(gl_GlobalInvocationID.xy), accumulated_value);
	imageStore(backbuffer, ivec2(gl_GlobalInvocationID.xy), vec4(accumulated_value.xyz/(adjusted_frame_index+1), 1));
}

void
BidirectionalPathTracing()
{
	uint adjusted_frame_index = (enable_dispersion ? frame_index/3 : frame_index);
	uint dispersion_index     = (enable_dispersion ? frame_index%3 : 0);

	uint invocation_index = gl_GlobalInvocationID.y*gl_NumWorkGroups.x*gl_WorkGroupSize.x + gl_GlobalInvocationID.x;
	uint seed = (invocation_index + adjusted_frame_index*187272781)*178525871;
	pcg32_seed(pcg_state, seed, invocation_index);

	vec3 origin           = vec3(0);
	float near_plane      = backbuffer_dim.x/2;
	float gaussian_radius = 2;
	vec3 ray = vec3(backbuffer_dim.x/2 - gl_GlobalInvocationID.x, -backbuffer_dim.y/2 + gl_GlobalInvocationID.y, near_plane);
	ray += gaussian_radius*(2*vec3(Random01() + Random01() + Random01(), Random01() + Random01() + Random01(), 0)/3 - vec3(1));
	ray = normalize(ray);

  vec3 color      = vec3(0);
  vec3 multiplier = vec3(1);

	bool is_transmitted = false;
	bool is_diffuse     = false;
	for (uint bounce = 0; bounce < number_of_bounces; ++bounce)
	{
		Hit_Data hit = CastRay(origin, ray, is_transmitted);
		if (hit.id == -1)
		{
			color = vec3(1, 0, 1);
			break;
		}
		else
		{
			vec3 new_origin = hit.point + hit.normal*0.001;

			Material hit_material = materials[hit.material_id];

			if (hit_material.kind == MaterialKind_Light)
			{
				if (bounce == 0 || !is_diffuse) color += multiplier*hit_material.color.xyz*hit_material.color.w;
				break;
			}
			else if (hit_material.kind == MaterialKind_Reflective)
			{
				is_transmitted = false;
				is_diffuse     = false;

				origin = new_origin;
				ray    = reflect(ray, hit.normal);
			}
			else if (hit_material.kind == MaterialKind_Refractive)
			{
				float ior = hit_material.color.xyz[dispersion_index];

        // NOTE: https://en.wikipedia.org/wiki/Schlick%27s_approximation
        //       https://blog.demofox.org/2017/01/09/raytracing-reflection-refraction-fresnel-total-internal-reflection-and-beers-law/
        //       https://graphics.stanford.edu/courses/cs148-10-summer/docs/2006--degreve--reflection_refraction.pdf

        float n1 = AIR_IOR;
        float n2 = ior;
        if (is_transmitted)
        {
          n1 = ior;
          n2 = AIR_IOR;
        }

        float n              = n1/n2;
        float cos_theta_i    = dot(-ray, hit.normal);
        float sin_sq_theta_t = n*n*(1 - cos_theta_i*cos_theta_i);
        float cos_theta_t    = sqrt(1 - sin_sq_theta_t);

        float r = 1;
        if (sin_sq_theta_t <= 1)
        {
          float r_s = (n1*cos_theta_i - n2*cos_theta_t)/(n1*cos_theta_i + n2*cos_theta_t);
          float r_p = (n2*cos_theta_i - n1*cos_theta_t)/(n2*cos_theta_i + n1*cos_theta_t);

          r = (r_s*r_s + r_p*r_p)/2;
        }

        vec3 new_ray;
        if (Random01() <= r)
        {
          new_ray = reflect(ray, hit.normal);
          is_transmitted = is_transmitted;
					is_diffuse     = false;
        }
        else
        {
          new_ray = refract(ray, hit.normal, n1/n2);

          is_transmitted = !is_transmitted;
					is_diffuse     = false;
        }

        origin = new_origin;
        ray    = new_ray;
			}
			else
			{
				Light light = lights[clamp(int(Random01()*lights.length()), 0, lights.length()-1)];

        float light_r1 = sqrt(Random01());
        float light_r2 = Random01();

        // NOTE: from section 4.2 of https://www.cs.princeton.edu/~funk/tog02.pdf
        vec3 light_p = (1 - light_r1)*light.p0_nx.xyz + (light_r1*(1-light_r2))*light.p1_ny.xyz + (light_r1*light_r2)*light.p2_nz.xyz;

        vec3 to_light   = light_p - hit.point;
        vec3 to_light_n = normalize(to_light);

        if (CastRay(new_origin, to_light_n, false).id == int(light.area_id_mat.y))
        {
          Material light_material = materials[int(light.area_id_mat.z)];

          vec3 light_normal    = vec3(light.p0_nx.w, light.p1_ny.w, light.p2_nz.w);
          float light_area     = light.area_id_mat.x;
          vec3 light_intensity = light_material.color.xyz*light_material.color.w;

          float res_pdf = (light_area*dot(-to_light_n, light_normal))/dot(to_light, to_light);

          color += multiplier*(hit_material.color.xyz/PI32)*light_intensity*dot(to_light_n, hit.normal)*res_pdf;
        }

				multiplier *= hit_material.color.xyz;

				is_transmitted = false;
				is_diffuse     = true;

				origin = new_origin;
				ray    = CosineWeightedRandomDirInHemi(hit.normal);
			}
		}
	}

	if (enable_dispersion)
	{
		vec3 color_mask = vec3(0);
		color_mask[dispersion_index] = 1;
		color *= color_mask;
	}

	vec4 accumulated_value = imageLoad(accumulated_frames_buffer, ivec2(gl_GlobalInvocationID.xy));
	accumulated_value.xyz += color;
	imageStore(accumulated_frames_buffer, ivec2(gl_GlobalInvocationID.xy), accumulated_value);
	imageStore(backbuffer, ivec2(gl_GlobalInvocationID.xy), vec4(accumulated_value.xyz/(adjusted_frame_index+1), 1));
}

void
main()
{
	if (enable_bidirectional_tracing) BidirectionalPathTracing();
	else                              PathTracing();
}
